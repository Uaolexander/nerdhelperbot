import random
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (—á–∏—Ç–∞—î—Ç—å—Å—è –∑ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∞–±–æ –∑–∞–¥–∞–Ω–∏–π –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
TOKEN = os.environ.get("TOKEN", "7667222068:AAHIp4IJn9GXDkSrgy8D3XiRqxfG3K-fuGQ")

# –¢–≤—ñ–π Telegram ID
ADMIN_ID = 529855903

# –°–ø–∏—Å–æ–∫ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
REPLY_VARIANTS = [
    "–î—è–∫—É—é –∑–∞ *–ø–∏—Ç–∞–Ω–Ω—è*! –Ø –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ –π–æ–≥–æ –∫–æ–º–∞–Ω–¥—ñ. *Stay tuned*! üöÄ\n\nüìù –¢–∏ –º–æ–∂–µ—à –Ω–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä—è–º–æ —Ç—É—Ç —É —á–∞—Ç—ñ! üòä",
    "–û–≥–æ, —Ü—ñ–∫–∞–≤–µ *–ø–∏—Ç–∞–Ω–Ω—è*! –ö–æ–º–∞–Ω–¥–∞ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–∞ –π–æ–≥–æ. –ß–µ–∫–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ! üòé\n\nüìù –¢–∏ –º–æ–∂–µ—à –Ω–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä—è–º–æ —Ç—É—Ç —É —á–∞—Ç—ñ! üòä",
    "–ö–ª–∞—Å–Ω–µ *–ø–∏—Ç–∞–Ω–Ω—è*! –Ø –ø–µ—Ä–µ–¥–∞–≤ –π–æ–≥–æ *EnglishNerd*. –°–∫–æ—Ä–æ –±—É–¥–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å! üí°\n\nüìù –¢–∏ –º–æ–∂–µ—à –Ω–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä—è–º–æ —Ç—É—Ç —É —á–∞—Ç—ñ! üòä",
    "–°—É–ø–µ—Ä, —Ç–≤–æ—î *–ø–∏—Ç–∞–Ω–Ω—è* —É –∫–æ–º–∞–Ω–¥—ñ! *Keep asking*, —ñ –º–∏ –¥–æ–ø–æ–º–æ–∂–µ–º–æ! ‚ú®\n\nüìù –¢–∏ –º–æ–∂–µ—à –Ω–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä—è–º–æ —Ç—É—Ç —É —á–∞—Ç—ñ! üòä",
    "–ß—É–¥–æ–≤–µ *–ø–∏—Ç–∞–Ω–Ω—è*! –í–æ–Ω–æ –≤–∂–µ –≤ –∫–æ–º–∞–Ω–¥—ñ. –ë—É–¥—É —Ç—Ä–∏–º–∞—Ç–∏ –≤ –∫—É—Ä—Å—ñ! üåü\n\nüìù –¢–∏ –º–æ–∂–µ—à –Ω–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä—è–º–æ —Ç—É—Ç —É —á–∞—Ç—ñ! üòä",
    "–¢–≤–æ—î *–ø–∏—Ç–∞–Ω–Ω—è* –≤—Ä–∞–∂–∞—î! –ü–µ—Ä–µ–¥–∞–≤ –∫–æ–º–∞–Ω–¥—ñ, —á–µ–∫–∞–π –Ω–æ–≤–∏–Ω! üéâ\n\nüìù –¢–∏ –º–æ–∂–µ—à –Ω–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä—è–º–æ —Ç—É—Ç —É —á–∞—Ç—ñ! üòä",
    "–ö—Ä—É—Ç–æ, —â–æ –ø–∏—Ç–∞—î—à! *–ü–∏—Ç–∞–Ω–Ω—è* –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±—É–¥–µ —Å–∫–æ—Ä–æ! üî•\n\nüìù –¢–∏ –º–æ–∂–µ—à –Ω–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä—è–º–æ —Ç—É—Ç —É —á–∞—Ç—ñ! üòä"
]

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–•–æ—á—É —Å—Ç–∞—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–º üéì"
def create_register_button():
    keyboard = [
        [
            InlineKeyboardButton("üéì –•–æ—á—É —Å—Ç–∞—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–º!", callback_data="register_for_lessons")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–∏—Ç–∞–Ω—å üìù"
def create_return_button():
    keyboard = [
        [
            InlineKeyboardButton("üìù –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–∏—Ç–∞–Ω—å", callback_data="return_to_questions")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ üìù"
def create_cancel_button():
    keyboard = [
        [
            InlineKeyboardButton("üìù –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel_registration")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# –°—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_states = {}

# –ö–æ–º–∞–Ω–¥–∞ /start (–æ–Ω–æ–≤–ª–µ–Ω–∞ –∑ –≥—ñ–ø–µ—Ä–ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —ñ –±–µ–∑ –ø—Ä–µ–≤‚Äô—é)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    if user_id in user_states and user_states[user_id] == "locked":
        del user_states[user_id]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî *NerdHelperBot*. –î–æ–ø–æ–º–∞–≥–∞—é –≤–∏–≤—á–∞—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É —Ä–∞–∑–æ–º! üòä\n\n"
        "üìå –ú–∏ –æ–±–∏—Ä–∞—î–º–æ *–Ω–∞–π—Ü—ñ–∫–∞–≤—ñ—à—ñ* –ø–∏—Ç–∞–Ω–Ω—è —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ –Ω–∏—Ö —É –∫–∞–Ω–∞–ª—ñ [EnglishNerd](https://t.me/englishnerd) ‚Äî –ø—ñ–¥–ø–∏—à–∏—Å—å, —â–æ–± –¥—ñ–∑–Ω–∞–≤–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ! "
        "–ù–∞ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–µ –æ–¥—Ä–∞–∑—É, –∞–ª–µ –º–∏ —Å—Ç–∞—Ä–∞—î–º–æ—Å—è! üí°\n\n"
        "üìù –¢–∏ –º–æ–∂–µ—à –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ *—Ç–µ–∫—Å—Ç*, *—Ñ–æ—Ç–æ* —á–∏ *–≤—ñ–¥–µ–æ* –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏. –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ!",
        parse_mode="Markdown",
        disable_web_page_preview=True,  # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø—Ä–µ–≤‚Äô—é –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        reply_markup=create_register_button()
    )
    await update.message.reply_text(
        "*–Ø —á–µ–∫–∞—é –Ω–∞ —Ç–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—èüòä üëá*",
        parse_mode="Markdown"
    )

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    callback_data = query.data

    if callback_data == "register_for_lessons":
        user_states[user_id] = "registration"
        await query.message.reply_text(
            "üéì –ö–ª–∞—Å–Ω–æ! –î–∞–≤–∞–π –∑–∞–ø–∏—à–µ–º–æ —Ç–µ–±–µ —è–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞! üòä\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –≤—Å—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:\n\n"
            "üìå –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?\n"
            "üìå –Ø–∫–∏–π —É —Ç–µ–±–µ —Ä—ñ–≤–µ–Ω—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó (–ø–æ—á–∞—Ç–∫–æ–≤–∏–π, —Å–µ—Ä–µ–¥–Ω—ñ–π, –ø—Ä–æ—Å—É–Ω—É—Ç–∏–π)?\n"
            "üìå –Ø–∫ —ñ–∑ —Ç–æ–±–æ—é –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ç–µ–ª–µ—Ñ–æ–Ω —á–∏ Telegram)?",
            parse_mode="Markdown",
            reply_markup=create_cancel_button()
        )
    elif callback_data == "return_to_questions":
        if user_id in user_states and user_states[user_id] == "locked":
            del user_states[user_id]
            await query.message.reply_text(
                "‚úÖ –¢–∏ –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è! –ó–∞–¥–∞–≤–∞–π —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ —á–∏ –≤—ñ–¥–µ–æ). –Ø –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∫–æ–º–∞–Ω–¥—ñ! üòä\n\n"
                "üìù –¢–∏ –º–æ–∂–µ—à –Ω–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä—è–º–æ —Ç—É—Ç —É —á–∞—Ç—ñ!",
                parse_mode="Markdown"
            )
    elif callback_data == "cancel_registration":
        if user_id in user_states and user_states[user_id] == "registration":
            del user_states[user_id]
            await query.message.reply_text(
                "‚ùå –¢–∏ –≤—ñ–¥–º—ñ–Ω–∏–≤ –∑–∞–ø–∏—Å! –ó–∞–¥–∞–≤–∞–π —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ —á–∏ –≤—ñ–¥–µ–æ). –Ø –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∫–æ–º–∞–Ω–¥—ñ! üòä\n\n"
                "üìù –¢–∏ –º–æ–∂–µ—à –Ω–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä—è–º–æ —Ç—É—Ç —É —á–∞—Ç—ñ!",
                parse_mode="Markdown"
            )

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–ø–∏—Ç–∞–Ω—å)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user = update.message.from_user
    message_text = update.message.text

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π (–ø—ñ—Å–ª—è –æ–ø–∏—Ç—É–≤–∞–ª—å–Ω–∏–∫–∞)
    if user_id in user_states and user_states[user_id] == "locked":
        await update.message.reply_text(
            "‚õî –¢–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π. –ù–∞—Ç–∏—Å–Ω–∏ '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–∏—Ç–∞–Ω—å', —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏! üòä",
            parse_mode="Markdown"
        )
        return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Ä–µ–∂–∏–º—ñ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
    if user_id in user_states and user_states[user_id] == "registration":
        user_info = (
            f"üéì –ù–æ–≤–∏–π —Å—Ç—É–¥–µ–Ω—Ç –≤—ñ–¥ @{user.username}:\n"
            f"–í—ñ–¥–ø–æ–≤—ñ–¥—å: {message_text}"
        )
        await context.bot.send_message(chat_id=ADMIN_ID, text=user_info)
        await update.message.reply_text(
            "‚úÖ –î—è–∫—É—é –∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å! –Ø –ø–µ—Ä–µ–¥–∞–≤ —Ç–≤–æ—ó –¥–∞–Ω—ñ –∫–æ–º–∞–Ω–¥—ñ. –û—á—ñ–∫—É–π –∑–≤‚Äô—è–∑–∫—É! üéâ",
            parse_mode="Markdown",
            reply_markup=create_return_button()
        )
        user_states[user_id] = "locked"
        return

    # –û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
    question = message_text
    user_info = f"üìù –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{user.username} (ID: {user_id}) –ø–∏—Ç–∞—î:\n{question}"
    await context.bot.send_message(chat_id=ADMIN_ID, text=user_info)
    reply = random.choice(REPLY_VARIANTS)
    await update.message.reply_text(reply, parse_mode="Markdown")

# –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user = update.message.from_user
    photo = update.message.photo[-1]

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π
    if user_id in user_states and user_states[user_id] == "locked":
        await update.message.reply_text(
            "‚õî –¢–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π. –ù–∞—Ç–∏—Å–Ω–∏ '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–∏—Ç–∞–Ω—å', —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏! üòä",
            parse_mode="Markdown"
        )
        return

    user_info = f"üì∏ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{user.username} (ID: {user_id}) –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ñ–æ—Ç–æ:"
    await context.bot.send_message(chat_id=ADMIN_ID, text=user_info)
    await context.bot.send_photo(chat_id=ADMIN_ID, photo=photo.file_id)
    reply = random.choice(REPLY_VARIANTS)
    await update.message.reply_text(reply, parse_mode="Markdown")

# –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–µ–æ
async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user = update.message.from_user
    video = update.message.video

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π
    if user_id in user_states and user_states[user_id] == "locked":
        await update.message.reply_text(
            "‚õî –¢–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π. –ù–∞—Ç–∏—Å–Ω–∏ '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–∏—Ç–∞–Ω—å', —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏! üòä",
            parse_mode="Markdown"
        )
        return

    user_info = f"üé• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{user.username} (ID: {user_id}) –Ω–∞–¥—ñ—Å–ª–∞–≤ –≤—ñ–¥–µ–æ:"
    await context.bot.send_message(chat_id=ADMIN_ID, text=user_info)
    await context.bot.send_video(chat_id=ADMIN_ID, video=video.file_id)
    reply = random.choice(REPLY_VARIANTS)
    await update.message.reply_text(reply, parse_mode="Markdown")

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
def main():
    app = Application.builder().token(TOKEN).build()

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.VIDEO, handle_video))

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    app.run_polling()

if __name__ == "__main__":
    main()
